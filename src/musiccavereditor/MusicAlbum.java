

package musiccavereditor;

import com.mpatric.mp3agic.ID3v2;
import com.mpatric.mp3agic.ID3v24Tag;
import com.mpatric.mp3agic.InvalidDataException;
import com.mpatric.mp3agic.Mp3File;
import com.mpatric.mp3agic.NotSupportedException;
import com.mpatric.mp3agic.UnsupportedTagException;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author user
 */


public class MusicAlbum extends javax.swing.JFrame {

    /**
     * Creates new form MusicAlbum
     */
    
    String folder_path = null;
    String image_path = null;
    String folder_path_parent = null;
    String folder_path_name = null;
    String[] folder_path1 = null;
    String[] folder_path_parent1 = null;
    String[] folder_path_name1 = null;
    Object[] fils = null;
    private String getpath;
    private String album  = "Album";
    private String Title = "Title";
    private String Track = "Track";
    private String albumartist = "Artist";
    private String year = "2020";
    private String priviewPath  = "C:\\";
    private String priviewPath2  = "C:\\";
    String changedfile;
    private String ext2;
    private String filename;
    String[] filename1 = null;
    private String[] ext22;
    String musicnametext;
    public MusicAlbum() {
        
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        folderPath = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        imagePath = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        imageView = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        vcname = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        pnumber = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        musicname = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Change Music Album Art");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/moviestore/Icons/folder_movies_icon_6.png")).getImage());
        setResizable(false);

        folderPath.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N
        folderPath.setToolTipText("You can drag and drop the folder or file into this field");

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Change Music Album Art");

        jLabel2.setText("Choose a file or folder that contain mp3 files :");

        jLabel3.setText("Choose an image of your video center :");

        imagePath.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N
        imagePath.setToolTipText("You can drag and drop image into this field");

        jButton2.setText("Browse");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Change");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Cancel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        imageView.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jList1.setToolTipText("You can open and play a file by single click");
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 204));
        jLabel4.setText("12/15");

        jLabel5.setText("Busness center name (optional): ");

        vcname.setColumns(30);
        vcname.setToolTipText("Add your video center name here - max 30 char");

        jLabel6.setText("Phone number (optional):");

        pnumber.setColumns(13);
        pnumber.setToolTipText("Add your phone number here - max 13 digit");

        jLabel7.setText("max 30 char");

        jLabel8.setText("max 13 digit");

        jLabel9.setText("File name (optional):");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6)
                            .addComponent(pnumber, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                            .addComponent(vcname, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(jLabel5)
                            .addComponent(musicname))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(36, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(imagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(6, 6, 6)
                                            .addComponent(imageView, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(folderPath, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(folderPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(14, 14, 14)
                .addComponent(jLabel3)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imagePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(4, 4, 4)
                .addComponent(imageView, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(musicname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vcname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pnumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jLabel4))
                .addContainerGap())
        );

        folderPath.setDropTarget(new DropTarget() {
            public synchronized void drop(DropTargetDropEvent evt){

                evt.acceptDrop(DnDConstants.ACTION_COPY);
                try {
                    List<File> droppedfile = (List<File>) evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);

                    for(File file : droppedfile){
                        getpath = file.getPath();
                        priviewPath2 = getpath;
                        folderPath.setText(file.getPath());
                        if(file.isDirectory()){

                            try {

                                fils = Files.walk(Paths.get(file.getPath())).filter(Files::isRegularFile).toArray();

                            } catch (IOException ex) {
                            }
                            folder_path1 = new String[fils.length];
                            folder_path_parent1 = new String[fils.length];
                            folder_path_name1 = new String[fils.length];
                            filename1 = new String[fils.length];
                            ext22 = new String[fils.length];
                            int i = 0;
                            for(Object files : fils){
                                File newfile = new File(files.toString());
                                String ext2 = "";
                                int d = newfile.getName().lastIndexOf('.');
                                if (d > 0){
                                    ext2 = newfile.getName().substring(d+1);
                                    filename = newfile.getName().substring(0, d);

                                }
                                switch (ext2) {
                                    case "mp3": case "MP3":
                                    case "wav": case "WAV":
                                    case "AAC": case "aac":
                                    case "AC3": case "ac3":
                                    case "AIF": case "aif":
                                    case "AIFF": case "aiff":
                                    case "AU": case "au":
                                    case "FLAC": case "flac":
                                    case "M4A": case "m4a":
                                    case "MKA": case "mka":
                                    case "MP2": case "mp2":
                                    case "OGG": case "ogg":
                                    case "WMA": case "wma":

                                    break;
                                    default:
                                    break;
                                }

                                folder_path1[i] = newfile.getPath();
                                folder_path_parent1[i] = newfile.getParent();
                                folder_path_name1[i] = newfile.getName();
                                filename1[i] = filename;
                                ext22[i] = ext2;
                                i++;
                            }

                        }else{
                            int d = file.getName().lastIndexOf('.');
                            if (d > 0){
                                ext2 = file.getName().substring(d+1);
                                filename = file.getName().substring(0, d);
                            }
                            fils = new String[0];
                            folder_path = file.getPath();
                            folder_path_parent = file.getParent();
                            folder_path_name = file.getName();
                        }

                    }
                } catch (UnsupportedFlavorException ex) {
                } catch (IOException ex) {
                }
            }
        });
        imagePath.setDropTarget(new DropTarget() {
            public synchronized void drop(DropTargetDropEvent evt){

                evt.acceptDrop(DnDConstants.ACTION_COPY);
                try {
                    List<File> droppedfile = (List<File>) evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                    for(File file : droppedfile){
                        String ext1 = "";
                        int d = file.getName().lastIndexOf('.');
                        if (d > 0){
                            ext1 = file.getName().substring(d+1);
                        }
                        if(ext1.equals("jpg")||ext1.equals("JPG")||ext1.equals("png")||ext1.equals("PNG")){
                            image_path = file.getPath();
                            imagePath.setText(image_path);
                            priviewPath = image_path;
                            try {
                                ImageIcon image;
                                File f1 = new File(image_path);
                                FileInputStream fis = new FileInputStream(f1);
                                try {
                                    BufferedImage bi = ImageIO.read(fis);
                                    Image scaledImage = bi.getScaledInstance(imageView.getWidth(), imageView.getHeight(), Image.SCALE_SMOOTH);
                                    image = new ImageIcon(scaledImage);
                                    imageView.setIcon(image);
                                } catch (IOException ex) {
                                    JOptionPane.showMessageDialog(MusicAlbum.this, "Please drop only image file!");
                                }
                            } catch (FileNotFoundException ex) {
                                JOptionPane.showMessageDialog(MusicAlbum.this, "Please drop only image file!");
                            }
                        }}
                    } catch (UnsupportedFlavorException ex) {
                        JOptionPane.showMessageDialog(MusicAlbum.this, "Please drop only image file!");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(MusicAlbum.this, "Please drop only image file!");
                    }
                }
            });
            jLabel4.setVisible(false);

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         JFileChooser chooser = new JFileChooser();
           chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
           FileNameExtensionFilter filter = new FileNameExtensionFilter("mp3", "mp3");
           chooser.setFileFilter(filter);
           File fi2 = new File(priviewPath2);
           chooser.setCurrentDirectory(fi2);
           int returnVal = chooser.showOpenDialog(this);
           if(returnVal == JFileChooser.APPROVE_OPTION){
               getpath = chooser.getSelectedFile().getPath();
               priviewPath2 = getpath;
               folderPath.setText(chooser.getSelectedFile().getPath());
               if(chooser.getSelectedFile().isDirectory()){
                   
                   
                   try {

                       fils = Files.walk(Paths.get(chooser.getSelectedFile().getPath())).filter(Files::isRegularFile).toArray();
                            
                       } catch (IOException ex) {
                           Logger.getLogger(MusicAlbum.class.getName()).log(Level.SEVERE, null, ex);
                       }
                   folder_path1 = new String[fils.length];
                   folder_path_parent1 = new String[fils.length];
                   folder_path_name1 = new String[fils.length];
                   filename1 = new String[fils.length];
                   ext22 = new String[fils.length];
               int i = 0;
               for(Object files : fils){
                   File newfile = new File(files.toString());
                   
                        int d = newfile.getName().lastIndexOf('.');
                        if (d > 0){
                            ext2 = newfile.getName().substring(d+1);
                            filename = newfile.getName().substring(0, d);
                          }
                     switch (ext2) {
                         case "mp3": case "MP3":
                             case "wav": case "WAV":
                                 case "AAC": case "aac":
                                     case "AC3": case "ac3":
                                         case "AIF": case "aif":
                                             case "AIFF": case "aiff":
                                                 case "AU": case "au":
                                                     case "FLAC": case "flac":
                                                         case "M4A": case "m4a":
                                                             case "MKA": case "mka":
                                                                 case "MP2": case "mp2":
                                                                     case "OGG": case "ogg":
                                                                         case "WMA": case "wma":
                                                                                     
                   
                                                                                                  
                                                                                                         break;
                                                                                                     default:
                                                                                                         break;
                     }
                   
                   folder_path1[i] = newfile.getPath();
                   folder_path_parent1[i] = newfile.getParent();
                   folder_path_name1[i] = newfile.getName();
                   
                   filename1[i] = filename;
                   ext22[i] = ext2;
                   i++;
               }
                   
               }else{
                   int d = chooser.getSelectedFile().getName().lastIndexOf('.');
                        if (d > 0){
                            ext2 = chooser.getSelectedFile().getName().substring(d+1);
                            filename = chooser.getSelectedFile().getName().substring(0, d);
                          }
                   fils = new String[0];
                   folder_path = chooser.getSelectedFile().getPath();
                   folder_path_parent = chooser.getSelectedFile().getParent();
                   folder_path_name = chooser.getSelectedFile().getName();
               }
               
               
           }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser chooser = new JFileChooser();
           FileNameExtensionFilter filter = new FileNameExtensionFilter("Image", "png", "jpg","JPG","PNG","svg","SVG");
           chooser.setFileFilter(filter);
           File fi2 = new File(priviewPath);
           chooser.setCurrentDirectory(fi2);
           int returnVal = chooser.showOpenDialog(this);
           if(returnVal == JFileChooser.APPROVE_OPTION){
               image_path = chooser.getSelectedFile().getPath();
               imagePath.setText(image_path);
               priviewPath = image_path;
               try {
               ImageIcon image;
               File f1 = new File(image_path);
               FileInputStream fis = new FileInputStream(f1);
               try {
                   BufferedImage bi = ImageIO.read(fis);
                   Image scaledImage = bi.getScaledInstance(imageView.getWidth(), imageView.getHeight(), Image.SCALE_SMOOTH);
                   image = new ImageIcon(scaledImage);
                   imageView.setIcon(image);
               } catch (IOException ex) {
                   Logger.getLogger(MusicAlbum.class.getName()).log(Level.SEVERE, null, ex);
               }
           } catch (FileNotFoundException ex) {
               Logger.getLogger(MusicAlbum.class.getName()).log(Level.SEVERE, null, ex);
           }
           }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        setVisible(false);
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        if(!musicname.getText().equals("")){
            filename = musicname.getText();
        }
        if(image_path!=null&&getpath != null){
            DefaultListModel listModel = new DefaultListModel();
             listModel.clear();
        if(fils.length>0){
            
              
              ExecutorService service = Executors.newFixedThreadPool(20);
                        service.submit(new Runnable(){
                            public void run(){
                jButton3.setEnabled(false);
                int i = 0;
                int changed = 0;
                int allfiles = fils.length;
                while(i < fils.length){
                  String folderpathparent = folder_path_parent1[i];
                  String folderpathname1 = folder_path_name1[i];
                  String folderpath1 = folder_path1[i];
                  String file_name1;
                  if(!musicname.getText().equals("")){
                     file_name1 = musicname.getText();
                    }
                  else{
                      file_name1 = filename1[i];
                  }
                  
                  String ext_22 = ext22[i];
                  if(ext_22.equals("mp3")||ext_22.equals("MP3")){
                      try {
                    Mp3File file = new Mp3File(new File(folder_path1[i]));
                    if(file.hasCustomTag()){
                        
                        listModel.addElement(folderpathname1+" can't be changed!");
                        jList1.setModel(listModel);
                          
                    }else if(file.hasId3v1Tag()){
                        year = file.getId3v1Tag().getYear();
                        album = file.getId3v1Tag().getAlbum();
                        Title = file.getId3v1Tag().getTitle();
                        Track = file.getId3v1Tag().getTrack();
                        file.removeId3v1Tag();
                        
                                 newTag3(file, folderpathparent, folderpathname1, folderpath1, listModel, file_name1, ext_22, i);
                           changed++;
                           jLabel4.setVisible(true);
                           jLabel4.setText(String.valueOf(changed)+"/"+allfiles+" are changed"); 
                    }else if(file.hasId3v2Tag()){
                        year = file.getId3v2Tag().getYear();
                        album = file.getId3v2Tag().getAlbum();
                        albumartist = file.getId3v2Tag().getAlbumArtist();
                        Title = file.getId3v2Tag().getTitle();
                        Track = file.getId3v2Tag().getTrack();
                        
                        newTag2(file, folderpathparent, folderpathname1, folderpath1, listModel, file_name1, ext_22, i);
                            changed++;
                    }else{
                        
                        newTag3(file, folderpathparent, folderpathname1, folderpath1, listModel, file_name1, ext_22, i);
                            changed++;
                            jLabel4.setVisible(true);
                            jLabel4.setText(String.valueOf(changed)+"/"+allfiles+" are changed");
                    }
                } catch (IOException | UnsupportedTagException | InvalidDataException ex) {
                    
                }
                  }
                  
                  i++;
              }
              jLabel4.setVisible(true);
              jLabel4.setText(String.valueOf(changed)+"/"+allfiles+" are changed");
              jButton3.setEnabled(true);
              }});
          }else{
            jLabel4.setVisible(false);
              try {
            Mp3File file = new Mp3File(new File(folder_path));
            if(file.hasCustomTag()){
                listModel.addElement(folder_path_name+" can't be changed!");
                jList1.setModel(listModel);
            }else if(file.hasId3v1Tag()){
                year = file.getId3v1Tag().getYear();
                album = file.getId3v1Tag().getAlbum();
                albumartist = file.getId3v1Tag().getArtist();
                Title = file.getId3v1Tag().getTitle();
                Track = file.getId3v1Tag().getTrack();
                file.removeId3v1Tag();
                newTagCustome(file, listModel);
            }else if(file.hasId3v2Tag()){
                year = file.getId3v2Tag().getYear();
                album = file.getId3v2Tag().getAlbum();
                albumartist = file.getId3v2Tag().getAlbumArtist();
                Title = file.getId3v2Tag().getTitle();
                Track = file.getId3v2Tag().getTrack();
                newTag(file, listModel);
            }else{
                newTagCustome(file, listModel);
            }
        } catch (IOException | UnsupportedTagException | InvalidDataException ex) {
           
        }
          }
        
        }  
        
    
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if(null != changedfile){
                    File file = new File(changedfile);
                    try {
                        Desktop.getDesktop().open(file);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                    }
          }
    }//GEN-LAST:event_jList1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MusicAlbum.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MusicAlbum.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MusicAlbum.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MusicAlbum.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MusicAlbum().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField folderPath;
    private javax.swing.JTextField imagePath;
    private javax.swing.JLabel imageView;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField musicname;
    private javax.swing.JTextField pnumber;
    private javax.swing.JTextField vcname;
    // End of variables declaration//GEN-END:variables

    private void newTag(Mp3File file, DefaultListModel listModel) {
        
        try {
            ID3v2 id3v2tagvalue = file.getId3v2Tag();
            file.setId3v2Tag(id3v2tagvalue);
            if(Track == null){
                id3v2tagvalue.setTrack("Track");
            }else{
                id3v2tagvalue.setTrack(Track);
            }
            
            if(albumartist == null){
                id3v2tagvalue.setArtist(new File(folder_path).getParentFile().getName());
            }else{
                id3v2tagvalue.setArtist(albumartist);
            }
            if(Title == null){
                id3v2tagvalue.setTitle("Title");
            }else{
                id3v2tagvalue.setTitle(Title);
            }
            
            if(album == null){
                id3v2tagvalue.setAlbum("The Album");
            }else{
                id3v2tagvalue.setAlbum(album);
            }
            if(year == null){
                id3v2tagvalue.setYear("2020");
            }else{
                id3v2tagvalue.setYear(year);
            }
            File imagefile = new File(image_path);
            byte[] bytes = Files.readAllBytes(imagefile.toPath());
            id3v2tagvalue.setAlbumImage(bytes, "image/jpg");
            
            if(vcname.getText()!=null&&pnumber.getText()==null){
                file.save(folder_path_parent+"\\"+filename+"_From_"+vcname.getText()+"."+ext2);
                listModel.addElement("File : "+folder_path_name+"    changed   to   "+filename+"_From_"+vcname.getText()+"."+ext2);
                changedfile = folder_path_parent+"\\"+filename+"_From_"+vcname.getText()+"."+ext2;
            }else if(vcname.getText()==null&&pnumber.getText()!=null){
                file.save(folder_path_parent+"\\"+filename+"_"+pnumber.getText()+"."+ext2);
                listModel.addElement("File : "+folder_path_name+"    changed   to   "+filename+"_"+pnumber.getText()+"."+ext2);
                changedfile = folder_path_parent+"\\"+filename+"_"+pnumber.getText()+"."+ext2;
            }else if(vcname.getText().equals("")&&pnumber.getText().equals("")){
               file.save(folder_path_parent+"\\"+filename+"0."+ext2);
               listModel.addElement("File : "+folder_path_name+"    changed   to   "+filename+"0."+ext2);
               changedfile = folder_path_parent+"\\"+filename+"0."+ext2;
            }else{
               file.save(folder_path_parent+"\\"+filename+"_From_"+vcname.getText()+"_"+pnumber.getText()+"."+ext2);
               listModel.addElement("File : "+folder_path_name+"    changed   to   "+filename+"_From_"+vcname.getText()+"_"+pnumber.getText()+"."+ext2);
               changedfile = folder_path_parent+"\\"+filename+"_From_"+vcname.getText()+"_"+pnumber.getText()+"."+ext2;
            }
            
            jList1.setModel(listModel);
            File deletefile = new File(folder_path);
            
            if(deletefile.delete()){
            }
        } catch (IOException | NotSupportedException ex) {
           
        }
    }

    private void newTag2(Mp3File file, String string, String string0, String folder_path1, DefaultListModel listModel,String file_name1,String ext_22, int i) {
        ExecutorService service = Executors.newFixedThreadPool(3);
                    service.submit(new Runnable(){
                        public void run(){

                                try {
            ID3v2 id3v2tagvalue = file.getId3v2Tag();
            file.setId3v2Tag(id3v2tagvalue);
            if(Track == null){
                id3v2tagvalue.setTrack("Track");
            }else{
                id3v2tagvalue.setTrack(Track);
            }
            
            if(albumartist == null){
                id3v2tagvalue.setArtist(new File(folder_path1).getParentFile().getName());
            }else{
                id3v2tagvalue.setArtist(albumartist);
            }
            if(Title == null){
                id3v2tagvalue.setTitle("Title");
            }else{
                id3v2tagvalue.setTitle(Title);
            }
            
            if(album == null){
                id3v2tagvalue.setAlbum("The Album");
            }else{
                id3v2tagvalue.setAlbum(album);
            }
            if(year == null){
                id3v2tagvalue.setYear("2020");
            }else{
                id3v2tagvalue.setYear(year);
            }
            File imagefile = new File(image_path);
            byte[] bytes = Files.readAllBytes(imagefile.toPath());
            id3v2tagvalue.setAlbumImage(bytes, "image/jpg");
            
            if(vcname.getText()!=null&&pnumber.getText()==null){
                file.save(string+"\\"+file_name1+"("+i+")"+"_From_"+vcname.getText()+"."+ext_22);
                listModel.addElement("File : "+string0+"    changed   to   "+file_name1+"("+i+")"+"_From_"+vcname.getText()+"."+ext_22);
                changedfile = string+"\\"+file_name1+"("+i+")"+"_From_"+vcname.getText()+"."+ext_22;
            }else if(vcname.getText()==null&&pnumber.getText()!=null){
                file.save(string+"\\"+file_name1+"("+i+")"+"_"+pnumber.getText()+"."+ext_22);
                listModel.addElement("File : "+string0+"    changed   to   "+file_name1+"("+i+")"+"_"+pnumber.getText()+"."+ext_22);
                changedfile = string+"\\"+file_name1+"("+i+")"+"_"+pnumber.getText()+"."+ext_22;
            }else if(vcname.getText().equals("")&&pnumber.getText().equals("")){
               file.save(string+"\\"+file_name1+"("+i+")"+"."+ext_22);
               listModel.addElement("File : "+string0+"    changed   to   "+file_name1+"("+i+")"+"."+ext_22);
               changedfile = string+"\\"+file_name1+"("+i+")"+"."+ext_22;
            }else{
               file.save(string+"\\"+file_name1+"("+i+")"+"_From_"+vcname.getText()+"_"+pnumber.getText()+"."+ext_22);
               listModel.addElement("File : "+string0+"    changed   to   "+file_name1+"("+i+")"+"_From_"+vcname.getText()+"_"+pnumber.getText()+"."+ext_22);
               changedfile = string+"\\"+file_name1+"("+i+")"+"_From_"+vcname.getText()+"_"+pnumber.getText()+"."+ext_22;
            }
            
            jList1.setModel(listModel);
            File deletefile = new File(folder_path1);
            
            if(deletefile.delete()){
            }
        } catch (IOException | NotSupportedException ex) {
        }

                        }});
       
    }

    private void newTag3(Mp3File file, String string, String string0, String folder_path1, DefaultListModel listModel,String file_name1, String ext_22, int i) {
        ExecutorService service = Executors.newFixedThreadPool(3);
                    service.submit(new Runnable(){
                        public void run(){
        try {
            ID3v2 id3v2tagvalue = new ID3v24Tag();
            file.setId3v2Tag(id3v2tagvalue);
            if(Track == null){
                id3v2tagvalue.setTrack("Track");
            }else{
                id3v2tagvalue.setTrack(Track);
            }
            
            if(albumartist == null){
                id3v2tagvalue.setArtist(new File(folder_path1).getParentFile().getName());
            }else{
                id3v2tagvalue.setArtist(albumartist);
            }
            if(Title == null){
                id3v2tagvalue.setTitle("Title");
            }else{
                id3v2tagvalue.setTitle(Title);
            }
            if(album == null){
                id3v2tagvalue.setAlbum("The Album");
            }else{
                id3v2tagvalue.setAlbum(album);
            }
            
            if(year == null){
                id3v2tagvalue.setYear("2020");
            }else{
                id3v2tagvalue.setYear(year);
            }
            File imagefile = new File(image_path);
            byte[] bytes = Files.readAllBytes(imagefile.toPath());
            id3v2tagvalue.setAlbumImage(bytes, "image/jpg");
            if(vcname.getText()!=null&&pnumber.getText()==null){
                file.save(string+"\\"+file_name1+"("+i+")"+"_From_"+vcname.getText()+"."+ext_22);
                listModel.addElement("File : "+string0+"    changed   to   "+file_name1+"("+i+")"+"_From_"+vcname.getText()+"."+ext_22);
                changedfile = string+"\\"+file_name1+"("+i+")"+"_From_"+vcname.getText()+"."+ext_22;
            }else if(vcname.getText()==null&&pnumber.getText()!=null){
                file.save(string+"\\"+file_name1+"("+i+")"+"_"+pnumber.getText()+"."+ext_22);
                listModel.addElement("File : "+string0+"    changed   to   "+file_name1+"("+i+")"+"_"+pnumber.getText()+"."+ext_22);
                changedfile = string+"\\"+file_name1+"("+i+")"+"_"+pnumber.getText()+"."+ext_22;
            }else if(vcname.getText().equals("")&&pnumber.getText().equals("")){
               file.save(string+"\\"+file_name1+"("+i+")"+"."+ext_22);
               listModel.addElement("File : "+string0+"    changed   to   "+file_name1+"("+i+")"+"."+ext_22);
               changedfile = string+"\\"+file_name1+"("+i+")"+"."+ext_22;
            }else{
               file.save(string+"\\"+file_name1+"("+i+")"+"_From_"+vcname.getText()+"_"+pnumber.getText()+"."+ext_22);
               listModel.addElement("File : "+string0+"    changed   to   "+file_name1+"("+i+")"+"_From_"+vcname.getText()+"_"+pnumber.getText()+"."+ext_22);
               changedfile = string+"\\"+file_name1+"("+i+")"+"_From_"+vcname.getText()+"_"+pnumber.getText()+"."+ext_22;
            }
            jList1.setModel(listModel);
            File deletefile = new File(folder_path1);
            
            if(deletefile.delete()){
            }
        } catch (IOException | NotSupportedException ex) {
        }
                        }});
    }

    private void newTagCustome(Mp3File file, DefaultListModel listModel) {
        ExecutorService service = Executors.newFixedThreadPool(3);
                    service.submit(new Runnable(){
                        public void run(){
        try {
                    ID3v2 id3v2tagvalue = new ID3v24Tag();
                    file.setId3v2Tag(id3v2tagvalue);
                    if(Track == null){
                        id3v2tagvalue.setTrack("Track");
                    }else{
                        id3v2tagvalue.setTrack(Track);
                    }

                    if(albumartist == null){
                        id3v2tagvalue.setArtist(new File(folder_path).getParentFile().getName());
                    }else{
                        id3v2tagvalue.setArtist(albumartist);
                    }
                    if(Title == null){
                        id3v2tagvalue.setTitle("Title");
                    }else{
                        id3v2tagvalue.setTitle(Title);
                    }

                    if(album == null){
                        id3v2tagvalue.setAlbum("The Album");
                    }else{
                        id3v2tagvalue.setAlbum(album);
                    }
                    if(year == null){
                        id3v2tagvalue.setYear("2020");
                    }else{
                        id3v2tagvalue.setYear(year);
                    }
                    File imagefile = new File(image_path);
                    byte[] bytes = Files.readAllBytes(imagefile.toPath());
                    id3v2tagvalue.setAlbumImage(bytes, "image/jpg");
                    if(vcname.getText()!=null&&pnumber.getText()==null){
                        file.save(folder_path_parent+"\\"+filename+"_From_"+vcname.getText()+"."+ext2);
                        listModel.addElement("File : "+folder_path_name+"    changed   to   "+filename+"_From_"+vcname.getText()+"."+ext2);
                        changedfile = folder_path_parent+"\\"+filename+"_From_"+vcname.getText()+"."+ext2;
                    }else if(vcname.getText()==null&&pnumber.getText()!=null){
                        file.save(folder_path_parent+"\\"+filename+"_"+pnumber.getText()+"."+ext2);
                        listModel.addElement("File : "+folder_path_name+"    changed   to   "+filename+"_"+pnumber.getText()+"."+ext2);
                        changedfile = folder_path_parent+"\\"+filename+"_"+pnumber.getText()+"."+ext2;
                    }else if(vcname.getText().equals("")&&pnumber.getText().equals("")){
                       file.save(folder_path_parent+"\\"+filename+"0."+ext2);
                       listModel.addElement("File : "+folder_path_name+"    changed   to   "+filename+"0."+ext2);
                       changedfile = folder_path_parent+"\\"+filename+"0."+ext2;
                    }else{
                       file.save(folder_path_parent+"\\"+filename+"_From_"+vcname.getText()+"_"+pnumber.getText()+"."+ext2);
                       listModel.addElement("File : "+folder_path_name+"    changed   to   "+filename+"_From_"+vcname.getText()+"_"+pnumber.getText()+"."+ext2);
                       changedfile = folder_path_parent+"\\"+filename+"_From_"+vcname.getText()+"_"+pnumber.getText()+"."+ext2;
                    }
                    jList1.setModel(listModel);
                    File deletefile = new File(folder_path);

                    if(deletefile.delete()){
                    }
                } catch (IOException | NotSupportedException ex) {

                }
    
                    }});
}}
